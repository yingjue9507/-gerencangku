const { app, BrowserWindow, BrowserView, ipcMain, Menu, shell, session } = require('electron');
const path = require('path');
const Store = require('electron-store');

// ÂàùÂßãÂåñÈÖçÁΩÆÂ≠òÂÇ®
const store = new Store();

class AIBrowserApp {
  constructor() {
    this.mainWindow = null;
    this.aiWindows = new Map(); // Â≠òÂÇ®AIÊúçÂä°Á™óÂè£
    this.popupWindows = new Map(); // Â≠òÂÇ®ÂºπÂá∫Á™óÂè£
    this.isDev = process.env.NODE_ENV === 'development';
  }

  async initialize() {
    console.log('üöÄ Initializing AI Browser...');
    
    // Ê∑ªÂä†ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ
    process.on('uncaughtException', (error) => {
      console.error('Uncaught Exception:', error);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('Unhandled Promise Rejection:', reason);
    });

    // Âú®ÂàõÂª∫‰ªª‰ΩïÁ™óÂè£‰πãÂâçÁ¶ÅÁî®GPUÂä†ÈÄüÔºåÈÅøÂÖçGPUËøõÁ®ãÂºÇÂ∏∏ÂØºËá¥Ê∏≤ÊüìÈóÆÈ¢ò
    try {
      app.disableHardwareAcceleration();
      app.commandLine.appendSwitch('disable-gpu');
      app.commandLine.appendSwitch('disable-software-rasterizer');
      console.log('‚úÖ GPU acceleration disabled');
    } catch (e) {
      console.warn('‚ö†Ô∏è Failed to disable GPU acceleration:', e);
    }

    try {
      // Á≠âÂæÖElectronÂáÜÂ§áÂ∞±Áª™
      console.log('‚è≥ Waiting for Electron to be ready...');
      await app.whenReady();
      console.log('‚úÖ Electron is ready');
      
      // ÂàõÂª∫‰∏ªÁ™óÂè£
      console.log('ü™ü Creating main window...');
      this.createMainWindow();
      
      // ËÆæÁΩÆÂ∫îÁî®ËèúÂçï
      console.log('üìã Setting up application menu...');
      this.setupMenu();
      
      // ËÆæÁΩÆIPCÁõëÂê¨Âô®
      console.log('üîó Setting up IPC listeners...');
      this.setupIPC();
      
      // ËÆæÁΩÆÂ∫îÁî®‰∫ã‰ª∂
      console.log('‚öôÔ∏è Setting up application events...');
      this.setupAppEvents();
      
      console.log('üéâ AI Browser initialization completed!');
    } catch (error) {
      console.error('‚ùå Initialization failed:', error);
      app.quit();
    }
  }

  createMainWindow() {
    try {
      console.log('üìù Creating main window configuration...');
      
      // ÂàõÂª∫‰∏ªÊéßÂà∂Á™óÂè£
      this.mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        minWidth: 800,
        minHeight: 600,
        webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        enableRemoteModule: false,
        webSecurity: false, // ÂÖÅËÆ∏webviewÂä†ËΩΩÂ§ñÈÉ®ÁΩëÁ´ô
        allowRunningInsecureContent: true,
        webviewTag: true, // ÂêØÁî®webviewÊ†áÁ≠æÊîØÊåÅ
        experimentalFeatures: true, // ÂêØÁî®ÂÆûÈ™åÊÄßÂäüËÉΩ
        plugins: true, // ÂêØÁî®Êèí‰ª∂ÊîØÊåÅ
        preload: path.join(__dirname, 'preload.js'),
        // Â¢ûÂº∫ÂÆâÂÖ®ÈÖçÁΩÆ
        spellcheck: false, // Á¶ÅÁî®ÊãºÂÜôÊ£ÄÊü•‰ª•ÂáèÂ∞ëÊåáÁ∫πËØÜÂà´
        backgroundThrottling: false, // Á¶ÅÁî®ÂêéÂè∞ËäÇÊµÅ
        offscreen: false, // Á¶ÅÁî®Á¶ªÂ±èÊ∏≤Êüì
        // ÂèçÊ£ÄÊµãÈÖçÁΩÆ
        additionalArguments: [
          '--disable-blink-features=AutomationControlled',
          '--disable-features=VizDisplayCompositor',
          '--disable-web-security',
          '--disable-features=TranslateUI',
          '--disable-ipc-flooding-protection'
        ]
      },
        titleBarStyle: 'default',
        show: false
      });

      console.log('‚úÖ Main window created successfully');

      // Âä†ËΩΩÊ∏≤ÊüìËøõÁ®ã
      const htmlPath = path.join(__dirname, '../renderer/index.html');
      console.log('üìÑ Loading HTML file:', htmlPath);
      
      if (this.isDev) {
        // ÂºÄÂèëÊ®°ÂºèÁõ¥Êé•Âä†ËΩΩÊú¨Âú∞HTMLÊñá‰ª∂
        this.mainWindow.loadFile(htmlPath);
      } else {
        this.mainWindow.loadFile(htmlPath);
      }

      // Á™óÂè£ÂáÜÂ§áÂ•ΩÂêéÊòæÁ§∫
      this.mainWindow.once('ready-to-show', () => {
        console.log('üëÅÔ∏è Main window ready, showing window');
        this.mainWindow.show();
        
        // ‰∏çÂÜçÈªòËÆ§ÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑ÔºåÂè™‰øùÁïôF12Âø´Êç∑ÈîÆÂäüËÉΩ
        // if (this.isDev) {
        //   this.mainWindow.webContents.openDevTools();
        // }
      });

      // Ê∑ªÂä†F12Âø´Êç∑ÈîÆÊîØÊåÅÂºÄÂèëËÄÖÂ∑•ÂÖ∑
      this.mainWindow.webContents.on('before-input-event', (event, input) => {
        if (input.key === 'F12') {
          if (this.mainWindow.webContents.isDevToolsOpened()) {
            this.mainWindow.webContents.closeDevTools();
          } else {
            this.mainWindow.webContents.openDevTools();
          }
        }
      });

      // Â§ÑÁêÜÁ™óÂè£ÂÖ≥Èó≠
      this.mainWindow.on('closed', () => {
        console.log('üö™ Main window closed');
        this.mainWindow = null;
      });

      // Ê∑ªÂä†ÈîôËØØÂ§ÑÁêÜ
      this.mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
        console.error('‚ùå Page load failed:', {
          errorCode,
          errorDescription,
          validatedURL
        });
      });

      this.mainWindow.webContents.on('crashed', (event, killed) => {
        console.error('üí• Renderer process crashed:', { killed });
      });

      // ÁõëÂê¨Ê∏≤ÊüìËøõÁ®ãÁöÑÊéßÂà∂Âè∞Ê∂àÊÅØ
      this.mainWindow.webContents.on('console-message', (event, level, message, line, sourceId) => {
        const logLevel = ['verbose', 'info', 'warning', 'error'][level] || 'info';
        console.log(`[Renderer ${logLevel.toUpperCase()}] ${message} (${sourceId}:${line})`);
      });

    } catch (error) {
      console.error('‚ùå Failed to create main window:', error);
      throw error;
    }
  }

  setupMenu() {
    const template = [
      {
        label: 'Êñá‰ª∂',
        submenu: [
          {
            label: 'Êñ∞Âª∫AIÁ™óÂè£',
            accelerator: 'CmdOrCtrl+N',
            click: () => this.createAIWindow()
          },
          { type: 'separator' },
          {
            label: 'ÈÄÄÂá∫',
            accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
            click: () => app.quit()
          }
        ]
      },
      {
        label: 'ÁºñËæë',
        submenu: [
          { label: 'Êí§ÈîÄ', accelerator: 'CmdOrCtrl+Z', role: 'undo' },
          { label: 'ÈáçÂÅö', accelerator: 'Shift+CmdOrCtrl+Z', role: 'redo' },
          { type: 'separator' },
          { label: 'Ââ™Âàá', accelerator: 'CmdOrCtrl+X', role: 'cut' },
          { label: 'Â§çÂà∂', accelerator: 'CmdOrCtrl+C', role: 'copy' },
          { label: 'Á≤òË¥¥', accelerator: 'CmdOrCtrl+V', role: 'paste' }
        ]
      },
      {
        label: 'ËßÜÂõæ',
        submenu: [
          { label: 'ÈáçÊñ∞Âä†ËΩΩ', accelerator: 'CmdOrCtrl+R', role: 'reload' },
          { label: 'Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩ', accelerator: 'CmdOrCtrl+Shift+R', role: 'forceReload' },
          // { label: 'ÂºÄÂèëËÄÖÂ∑•ÂÖ∑', accelerator: 'F12', role: 'toggleDevTools' }, // Â∑≤Á¶ÅÁî®F12Âø´Êç∑ÈîÆ
          { type: 'separator' },
          { label: 'ÂÆûÈôÖÂ§ßÂ∞è', accelerator: 'CmdOrCtrl+0', role: 'resetZoom' },
          { label: 'ÊîæÂ§ß', accelerator: 'CmdOrCtrl+Plus', role: 'zoomIn' },
          { label: 'Áº©Â∞è', accelerator: 'CmdOrCtrl+-', role: 'zoomOut' },
          { type: 'separator' },
          { label: 'ÂÖ®Â±è', accelerator: 'F11', role: 'togglefullscreen' }
        ]
      },
      {
        label: 'Â∏ÆÂä©',
        submenu: [
          {
            label: 'ÂÖ≥‰∫é',
            click: () => {
              shell.openExternal('https://github.com/your-repo/multi-ai-browser');
            }
          }
        ]
      }
    ];

    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
  }

  setupIPC() {
    // ÂàõÂª∫AIÁ™óÂè£
    ipcMain.handle('create-ai-window', async (event, config) => {
      return this.createAIWindow(config);
    });

    // ÂÖ≥Èó≠AIÁ™óÂè£
    ipcMain.handle('close-ai-window', async (event, windowId) => {
      return this.closeAIWindow(windowId);
    });

    // Ëé∑ÂèñÊâÄÊúâAIÁ™óÂè£
    ipcMain.handle('get-ai-windows', async () => {
      const windows = [];
      for (const [windowId, windowData] of this.aiWindows.entries()) {
        if (windowData.window && !windowData.window.isDestroyed()) {
          windows.push({
            id: windowId,
            serviceId: windowData.serviceId
          });
        }
      }
      return windows;
    });

    // ÂêëAIÁ™óÂè£ÂèëÈÄÅÊ∂àÊÅØ
    ipcMain.handle('send-to-ai-window', async (event, windowId, message) => {
      const windowData = this.aiWindows.get(windowId);
      if (windowData && windowData.window && !windowData.window.isDestroyed()) {
        windowData.window.webContents.executeJavaScript(`
          window.postMessage(${JSON.stringify(message)}, '*');
        `);
        return true;
      }
      return false;
    });

    // ‰øùÂ≠òÈÖçÁΩÆ
    ipcMain.handle('save-config', async (event, config) => {
      store.set('config', config);
      return true;
    });

    // Âä†ËΩΩÈÖçÁΩÆ
    ipcMain.handle('load-config', async () => {
      return store.get('config', {});
    });

    // Êõ¥Êñ∞Á™óÂè£ËÆæÁΩÆ
    ipcMain.handle('update-window-settings', async (event, windowSettings) => {
      try {
        if (this.mainWindow && !this.mainWindow.isDestroyed()) {
          // Â∫îÁî®Á™óÂè£ËÆæÁΩÆ
          if (windowSettings.alwaysOnTop !== undefined) {
            this.mainWindow.setAlwaysOnTop(windowSettings.alwaysOnTop);
          }
          if (windowSettings.opacity !== undefined) {
            this.mainWindow.setOpacity(windowSettings.opacity);
          }
          if (windowSettings.width && windowSettings.height) {
            this.mainWindow.setSize(windowSettings.width, windowSettings.height);
          }
          if (windowSettings.x !== undefined && windowSettings.y !== undefined) {
            this.mainWindow.setPosition(windowSettings.x, windowSettings.y);
          }
          return true;
        }
        return false;
      } catch (error) {
        console.error('Failed to update window settings:', error);
        return false;
      }
    });

    // ‰ºöËØùÊï∞ÊçÆÊ∏ÖÁêÜÔºöÊåâÂàÜÂå∫Ê∏ÖÈô§Â≠òÂÇ®Êï∞ÊçÆÔºàcookies„ÄÅlocalStorage„ÄÅIndexedDB„ÄÅServiceWorkers„ÄÅcachesÁ≠âÔºâ
    ipcMain.handle('clear-session-data', async (event, partitionId, options = {}) => {
      try {
        if (!partitionId || typeof partitionId !== 'string') {
          return { success: false, error: 'Invalid partition ID' };
        }

        // Áªü‰∏Ä‰ΩøÁî®ÊåÅ‰πÖÂåñÂàÜÂå∫ÂëΩÂêç
        const partitionName = partitionId.startsWith('persist:') 
          ? partitionId 
          : `persist:${partitionId}`;

        const ses = session.fromPartition(partitionName);
        if (!ses) {
          return { success: false, error: `Partition not found: ${partitionName}` };
        }

        // ÈªòËÆ§Ê∏ÖÁêÜÁöÑÂ≠òÂÇ®Á±ªÂûã
        const defaultTypes = ['cookies', 'localstorage', 'indexdb', 'serviceworkers', 'caches'];
        const types = Array.isArray(options.types) && options.types.length > 0 
          ? options.types 
          : defaultTypes;

        // Electron API ÁöÑÁ±ªÂûãÂêçÁß∞
        const validTypes = ['appcache','cookies','filesystem','indexdb','localstorage','shadercache','serviceworkers','caches','websql'];
        const storages = types
          .map(t => t.toLowerCase())
          .filter(t => validTypes.includes(t));

        // Ê∏ÖÁêÜÂ≠òÂÇ®Êï∞ÊçÆ
        await ses.clearStorageData({ storages });

        // ÂèØÈÄâÊ∏ÖÁêÜÁºìÂ≠ò
        const includeCache = options.includeCache !== false; // ÈªòËÆ§Ê∏ÖÁêÜÁºìÂ≠ò
        if (includeCache && ses.clearCache) {
          await ses.clearCache();
        }

        return { success: true };
      } catch (error) {
        console.error('Failed to clear session data:', error);
        return { success: false, error: error.message || String(error) };
      }
    });
  }

  createAIWindow(config = {}) {
    const windowId = `ai-window-${Date.now()}`;
    
    const aiWindow = new BrowserWindow({
      width: config.width || 1000,
      height: config.height || 700,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        webSecurity: false, // ÂÖÅËÆ∏Ë∑®ÂüüËØ∑Ê±Ç
        allowRunningInsecureContent: true,
        preload: path.join(__dirname, 'ai-preload.js'),
        // Â¢ûÂº∫ÂÆâÂÖ®ÈÖçÁΩÆ
        spellcheck: false, // Á¶ÅÁî®ÊãºÂÜôÊ£ÄÊü•‰ª•ÂáèÂ∞ëÊåáÁ∫πËØÜÂà´
        backgroundThrottling: false, // Á¶ÅÁî®ÂêéÂè∞ËäÇÊµÅ
        offscreen: false, // Á¶ÅÁî®Á¶ªÂ±èÊ∏≤Êüì
        // ÂèçÊ£ÄÊµãÈÖçÁΩÆ
        additionalArguments: [
          '--disable-blink-features=AutomationControlled',
          '--disable-features=VizDisplayCompositor',
          '--disable-web-security',
          '--disable-features=TranslateUI',
          '--disable-ipc-flooding-protection',
          '--no-first-run',
          '--no-default-browser-check'
        ]
      },
      title: config.title || 'AIÊúçÂä°Á™óÂè£',
      show: false
    });

    // Âä†ËΩΩAIÊúçÂä°URL
    if (config.url) {
      aiWindow.loadURL(config.url);
    }

    // Á™óÂè£ÂáÜÂ§áÂ•ΩÂêéÊòæÁ§∫
    aiWindow.once('ready-to-show', () => {
      aiWindow.show();
    });

    // Â§ÑÁêÜÁ™óÂè£ÂÖ≥Èó≠
    aiWindow.on('closed', () => {
      this.aiWindows.delete(windowId);
    });

    // Â≠òÂÇ®Á™óÂè£ÂºïÁî®ÂíåÈÖçÁΩÆ‰ø°ÊÅØ
    this.aiWindows.set(windowId, {
      window: aiWindow,
      serviceId: config.serviceId || null,
      config: config
    });

    return windowId;
  }

  // closeAIWindowÊñπÊ≥ïÂ∑≤Âú®‰∏ãÊñπÈáçÊñ∞ÂÆö‰πâÔºåÂåÖÂê´Êõ¥Â•ΩÁöÑËµÑÊ∫êÊ∏ÖÁêÜ

  recallPopupWindow(windowId) {
    const windowData = this.popupWindows.get(windowId);
    if (windowData && windowData.window && !windowData.window.isDestroyed()) {
      try {
        // Ëé∑ÂèñÁ™óÂè£ÁöÑÂΩìÂâçURL
        const currentUrl = windowData.window.webContents.getURL();
        
        // Âú®Áà∂webview‰∏≠Âä†ËΩΩËøô‰∏™URL
        windowData.parentWebview.loadURL(currentUrl);
        
        // ÂÖ≥Èó≠ÂºπÂá∫Á™óÂè£
        windowData.window.close();
        this.popupWindows.delete(windowId);
        
        return { success: true };
      } catch (error) {
        console.error('Failed to recall window:', error);
        return { success: false, error: error.message };
      }
    }
    return { success: false, error: 'Window does not exist' };
  }

  setupAppEvents() {
    const self = this;
    
    // ÂΩìÊâÄÊúâÁ™óÂè£ÂÖ≥Èó≠Êó∂
    app.on('window-all-closed', () => {
      if (process.platform !== 'darwin') {
        // Âú®ÈÄÄÂá∫ÂâçÊ∏ÖÁêÜÊâÄÊúâËµÑÊ∫ê
        this.cleanup();
        app.quit();
      }
    });

    // ÂΩìÂ∫îÁî®ÊøÄÊ¥ªÊó∂
    app.on('activate', () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        this.createMainWindow();
      }
    });

    // Â∫îÁî®Âç≥Â∞ÜÈÄÄÂá∫Êó∂ÁöÑÊ∏ÖÁêÜ
    app.on('before-quit', (event) => {
      console.log('üßπ Application is about to quit, performing cleanup...');
      this.cleanup();
    });

    // Â§ÑÁêÜÂ∫îÁî®ÊÑèÂ§ñÈÄÄÂá∫
    app.on('will-quit', (event) => {
      console.log('üîÑ Application will quit, final cleanup...');
      this.cleanup();
    });

    // Â§ÑÁêÜÁ¨¨‰∫å‰∏™ÂÆû‰æã
    app.on('second-instance', () => {
      if (this.mainWindow) {
        if (this.mainWindow.isMinimized()) {
          this.mainWindow.restore();
        }
        this.mainWindow.focus();
      }
    });

    // Â§ÑÁêÜËØÅ‰π¶ÈîôËØØ - ‰∏ìÈó®ÈíàÂØπË∞∑Ê≠åÁôªÂΩï‰ºòÂåñ
    app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
      console.log('Certificate error for URL:', url, 'Error:', error);
      
      // ÂØπ‰∫éË∞∑Ê≠åÁõ∏ÂÖ≥ÂüüÂêçÔºåÈááÁî®Êõ¥ÂÆΩÊùæÁöÑËØÅ‰π¶È™åËØÅ
      const googleDomains = [
        'accounts.google.com',
        'oauth2.googleapis.com', 
        'www.googleapis.com',
        'ssl.gstatic.com',
        'fonts.googleapis.com',
        'apis.google.com'
      ];
      
      const isGoogleDomain = googleDomains.some(domain => url.includes(domain));
      
      if (isGoogleDomain) {
        console.log('ÂÖÅËÆ∏Ë∞∑Ê≠åÂüüÂêçÁöÑËØÅ‰π¶ÈîôËØØ:', url);
        event.preventDefault();
        callback(true);
      } else if (process.env.NODE_ENV === 'development') {
        // ÂºÄÂèëÁéØÂ¢ÉÂøΩÁï•ÊâÄÊúâËØÅ‰π¶ÈîôËØØ
        event.preventDefault();
        callback(true);
      } else {
        // ÂÖ∂‰ªñÂüüÂêç‰∏•Ê†ºÈ™åËØÅËØÅ‰π¶
        console.log('ÊãíÁªùËØÅ‰π¶ÈîôËØØ:', url, error);
        callback(false);
      }
    });



    // Â§ÑÁêÜÊñ∞Á™óÂè£ÊâìÂºÄ
    app.on('web-contents-created', (event, contents) => {
      // OAuth/ÁôªÂΩïÂüüÂêçÁôΩÂêçÂçïÔºàÂú®ÂÜÖÂµå webview ‰∏≠Â∫î‰ª•ÂÆâÂÖ®Â≠êÁ™óÂè£ÊñπÂºèÊâìÂºÄÔºâ
      const OAUTH_URL_PATTERNS = [
        /https?:\/\/accounts\.google\.com\//i,
        /https?:\/\/login\.microsoftonline\.com\//i,
        /https?:\/\/github\.com\/login/i,
        /https?:\/\/auth\.openai\.com\//i,
        /https?:\/\/id\.atlassian\.com\//i,
        /https?:\/\/auth\.slack\.com\//i
      ];

      contents.on('new-window', (event, navigationUrl, frameName, disposition, options) => {
        console.log('Main process received new-window event:', {
          url: navigationUrl,
          disposition: disposition,
          hasHostWebContents: !!contents.hostWebContents,
          hostType: contents.hostWebContents ? contents.hostWebContents.getType() : 'none',
          contentsType: contents.getType()
        });
        
        // Ê£ÄÊü•ÊòØÂê¶ÊòØwebviewÂÜÖÁöÑÂºπÁ™ó
        if (contents.hostWebContents && contents.hostWebContents.getType() === 'webview') {
          // ÂØπ‰∫éwebviewÂÜÖÁöÑÂºπÁ™óÔºåÂàõÂª∫Êñ∞ÁöÑÂ≠êÁ™óÂè£ËÄå‰∏çÊòØÂú®Â§ñÈÉ®ÊµèËßàÂô®ÊâìÂºÄ
          if (disposition === 'new-window' || disposition === 'foreground-tab') {
            event.preventDefault();

            // Âà§ÂÆöÊòØÂê¶‰∏∫ OAuth/ÁôªÂΩïÂüüÂêç
            const isOAuthUrl = OAUTH_URL_PATTERNS.some((re) => re.test(navigationUrl));

            // ‰ΩøÁî®‰∫ã‰ª∂Êèê‰æõÁöÑ options Êù•ÂàõÂª∫Á™óÂè£ÔºåÁ°Æ‰øùÁªßÊâøÁà∂ webview ÁöÑÂàÜÂå∫/ÂÆâÂÖ®ÈÖçÁΩÆ
            const safeOptions = {
              ...options,
              parent: self.mainWindow || options.parent,
              show: true,
              width: options?.width || 800,
              height: options?.height || 600,
              webPreferences: {
                ...(options?.webPreferences || {}),
                // Âº∫ÂåñÂÆâÂÖ®ÔºåÈÅøÂÖçË¢´Âà§ÂÆö‰∏∫‰∏çÂÆâÂÖ®ÁéØÂ¢É
                nodeIntegration: false,
                contextIsolation: true,
                sandbox: true,
                webSecurity: true
              }
            };

            const popupWindow = new BrowserWindow(safeOptions);

            // Â≠òÂÇ®Á™óÂè£ÂºïÁî®
            const windowId = Date.now().toString();
            self.popupWindows.set(windowId, {
              window: popupWindow,
              url: navigationUrl,
              parentWebview: contents,
              windowId: windowId
            });

            // Áé∞‰ª£ÊµèËßàÂô® UAÔºåÈÅøÂÖçÊòæÂºèÊö¥Èú≤ Electron ÁâπÂæÅ
            // Âõ∫ÂÆö‰ΩøÁî®ÊúÄÊñ∞ÁöÑË∞∑Ê≠åChromeÊµèËßàÂô®Ê†áËØÜ
const MODERN_UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36';

            // Âä†ËΩΩURLÂà∞ÂºπÂá∫Á™óÂè£Âπ∂ÊåáÂÆö UA
            try {
              popupWindow.loadURL(navigationUrl, { userAgent: MODERN_UA });
            } catch (e) {
              // ÂõûÈÄÄ
              popupWindow.loadURL(navigationUrl);
            }

            // OAuth ÂºπÁ™ó‰∏çÂÜç‰ΩøÁî®Ëá™Âä®Êî∂ÂõûÔºåÁôªÂΩïÊàêÂäüÂêéÁî±Áî®Êà∑ÂÖ≥Èó≠ÊàñÂêéÁª≠ÂØºËà™Ê£ÄÊµãÊî∂Âõû
            if (!isOAuthUrl) {
              console.log('Non-OAuth popup, setting auto-recall timer, executing in 2 seconds');
              const autoRecallTimer = setTimeout(() => {
                if (self.popupWindows.has(windowId)) {
                  const windowData = self.popupWindows.get(windowId);
                  if (windowData && windowData.window && !windowData.window.isDestroyed()) {
                    const result = self.recallPopupWindow(windowId);
                    if (result.success) {
                      console.log('Popup window automatically recalled to main window');
                    } else {
                      console.error('Auto-recall failed:', result.error);
                    }
                  }
                }
              }, 2000);
              // ËÆ∞ÂΩïÂÆöÊó∂Âô®Ôºå‰æø‰∫éÊ∏ÖÁêÜ
              self.popupWindows.get(windowId).autoRecallTimer = autoRecallTimer;
            }
            
            // ‰∏∫ÂºπÂá∫Á™óÂè£ÂàõÂª∫Ëá™ÂÆö‰πâËèúÂçï
            const popupMenuTemplate = [
              {
                label: 'Êñá‰ª∂',
                submenu: [
                  {
                    label: 'Êî∂ÂõûÂà∞‰∏ªÁ™óÂè£',
                    accelerator: 'CmdOrCtrl+Shift+R',
                    click: () => {
                      // ÊâßË°åÊî∂ÂõûÊìç‰Ωú
                      self.recallPopupWindow(windowId);
                    }
                  },
                  { type: 'separator' },
                  {
                    label: 'ÂÖ≥Èó≠Á™óÂè£',
                    accelerator: 'CmdOrCtrl+W',
                    click: () => {
                      popupWindow.close();
                    }
                  }
                ]
              },
              {
                label: 'ÁºñËæë',
                submenu: [
                  { label: 'Êí§ÈîÄ', accelerator: 'CmdOrCtrl+Z', role: 'undo' },
                  { label: 'ÈáçÂÅö', accelerator: 'Shift+CmdOrCtrl+Z', role: 'redo' },
                  { type: 'separator' },
                  { label: 'Ââ™Âàá', accelerator: 'CmdOrCtrl+X', role: 'cut' },
                  { label: 'Â§çÂà∂', accelerator: 'CmdOrCtrl+C', role: 'copy' },
                  { label: 'Á≤òË¥¥', accelerator: 'CmdOrCtrl+V', role: 'paste' }
                ]
              },
              {
                label: 'ËßÜÂõæ',
                submenu: [
                  { label: 'ÈáçÊñ∞Âä†ËΩΩ', accelerator: 'CmdOrCtrl+R', role: 'reload' },
                  { label: 'Âº∫Âà∂ÈáçÊñ∞Âä†ËΩΩ', accelerator: 'CmdOrCtrl+Shift+F5', role: 'forceReload' },
                  // { label: 'ÂºÄÂèëËÄÖÂ∑•ÂÖ∑', accelerator: 'F12', role: 'toggleDevTools' }, // Â∑≤Á¶ÅÁî®F12Âø´Êç∑ÈîÆ
                  { type: 'separator' },
                  { label: 'ÂÆûÈôÖÂ§ßÂ∞è', accelerator: 'CmdOrCtrl+0', role: 'resetZoom' },
                  { label: 'ÊîæÂ§ß', accelerator: 'CmdOrCtrl+Plus', role: 'zoomIn' },
                  { label: 'Áº©Â∞è', accelerator: 'CmdOrCtrl+-', role: 'zoomOut' },
                  { type: 'separator' },
                  { label: 'ÂÖ®Â±è', accelerator: 'F11', role: 'togglefullscreen' }
                ]
              }
            ];
            
            const popupMenu = Menu.buildFromTemplate(popupMenuTemplate);
            popupWindow.setMenu(popupMenu);
            
            // Ê∑ªÂä†Ctrl+Èº†Ê†áÊªöËΩÆÁº©ÊîæÂäüËÉΩ
            popupWindow.webContents.on('dom-ready', () => {
              popupWindow.webContents.executeJavaScript(`
                // Ê∑ªÂä†Èº†Ê†áÊªöËΩÆÁº©ÊîæÂäüËÉΩ
                let currentZoomLevel = 1.0;
                
                document.addEventListener('wheel', (event) => {
                  if (event.ctrlKey) {
                    event.preventDefault();
                    
                    // ËÆ°ÁÆóÊñ∞ÁöÑÁº©ÊîæÁ∫ßÂà´
                    if (event.deltaY < 0) {
                      // Âêë‰∏äÊªöÂä®ÔºåÊîæÂ§ß
                      currentZoomLevel = Math.min(currentZoomLevel * 1.1, 3.0);
                    } else {
                      // Âêë‰∏ãÊªöÂä®ÔºåÁº©Â∞è
                      currentZoomLevel = Math.max(currentZoomLevel * 0.9, 0.25);
                    }
                    
                    // Â∫îÁî®Áº©Êîæ
                    document.body.style.zoom = currentZoomLevel;
                    console.log('Zoom level:', currentZoomLevel);
                  }
                }, { passive: false });
                
                console.log('Popup window zoom feature enabled: Ctrl+Mouse wheel');
              `).catch(err => {
                console.error('Failed to inject zoom script:', err);
              });
            });
            
            // Á™óÂè£ÂÖ≥Èó≠Êó∂Ê∏ÖÁêÜÂºïÁî®
            popupWindow.on('closed', () => {
              // Ê∏ÖÈô§Ëá™Âä®Êî∂ÂõûÂÆöÊó∂Âô®
              const windowData = self.popupWindows.get(windowId);
              if (windowData && windowData.autoRecallTimer) {
                clearTimeout(windowData.autoRecallTimer);
                console.log('Auto-recall timer cleared');
              }
              self.popupWindows.delete(windowId);
            });
            
            return;
          }
        }
        
        // ÂØπ‰∫éÂÖ∂‰ªñÊÉÖÂÜµÔºåÂú®Â§ñÈÉ®ÊµèËßàÂô®‰∏≠ÊâìÂºÄ
        event.preventDefault();
        shell.openExternal(navigationUrl);
      });
    });

    // Ê∑ªÂä†IPCÂ§ÑÁêÜÂô®Êù•ÁÆ°ÁêÜÁ™óÂè£Êî∂ÂõûÂäüËÉΩ
    ipcMain.handle('get-popup-windows', () => {
      const windows = [];
      self.popupWindows.forEach((data, id) => {
        if (data.window && !data.window.isDestroyed()) {
          windows.push({
            id: id,
            url: data.url,
            title: data.window.getTitle()
          });
        }
      });
      return windows;
    });

    ipcMain.handle('recall-window', async (event, windowId) => {
      const windowData = self.popupWindows.get(windowId);
      if (windowData && windowData.window && !windowData.window.isDestroyed()) {
        try {
          // Ëé∑ÂèñÁ™óÂè£ÁöÑÂΩìÂâçURL
          const currentUrl = windowData.window.webContents.getURL();
          
          // Âú®Áà∂webview‰∏≠Âä†ËΩΩËøô‰∏™URL
          windowData.parentWebview.loadURL(currentUrl);
          
          // ÂÖ≥Èó≠ÂºπÂá∫Á™óÂè£
          windowData.window.close();
          self.popupWindows.delete(windowId);
          
          return { success: true };
        } catch (error) {
          console.error('Failed to recall window:', error);
          return { success: false, error: error.message };
        }
      }
      return { success: false, error: 'Window does not exist' };
    });
  }

  // Â∫îÁî®Ê∏ÖÁêÜÊñπÊ≥ï
  cleanup() {
    try {
      console.log('üßπ Starting application cleanup...');
      
      // Ê∏ÖÁêÜÊâÄÊúâAIÁ™óÂè£
      if (this.aiWindows && this.aiWindows.size > 0) {
        console.log(`üóëÔ∏è Cleaning up ${this.aiWindows.size} AI windows...`);
        for (const [windowId, windowData] of this.aiWindows.entries()) {
          try {
            if (windowData.window && !windowData.window.isDestroyed()) {
              windowData.window.removeAllListeners();
              windowData.window.close();
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è Failed to cleanup AI window ${windowId}:`, error.message);
          }
        }
        this.aiWindows.clear();
      }

      // Ê∏ÖÁêÜÊâÄÊúâÂºπÂá∫Á™óÂè£
      if (this.popupWindows && this.popupWindows.size > 0) {
        console.log(`üóëÔ∏è Cleaning up ${this.popupWindows.size} popup windows...`);
        for (const [windowId, windowData] of this.popupWindows.entries()) {
          try {
            if (windowData.window && !windowData.window.isDestroyed()) {
              windowData.window.removeAllListeners();
              windowData.window.close();
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è Failed to cleanup popup window ${windowId}:`, error.message);
          }
        }
        this.popupWindows.clear();
      }

      // Ê∏ÖÁêÜ‰∏ªÁ™óÂè£
      if (this.mainWindow && !this.mainWindow.isDestroyed()) {
        console.log('üóëÔ∏è Cleaning up main window...');
        try {
          this.mainWindow.removeAllListeners();
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to remove main window listeners:', error.message);
        }
      }

      // Ê∏ÖÁêÜIPCÁõëÂê¨Âô®
      try {
        ipcMain.removeAllListeners();
        console.log('‚úÖ IPC listeners cleaned up');
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to cleanup IPC listeners:', error.message);
      }

      // Ê∏ÖÁêÜ‰ºöËØùÊï∞ÊçÆÔºàÂèØÈÄâÔºåÊ†πÊçÆÈúÄË¶ÅÔºâ
      try {
        const defaultSession = session.defaultSession;
        if (defaultSession) {
          // Ê∏ÖÁêÜÁºìÂ≠òÂíå‰∏¥Êó∂Êï∞ÊçÆ
          defaultSession.clearCache().catch(err => 
            console.warn('‚ö†Ô∏è Failed to clear session cache:', err.message)
          );
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to cleanup session data:', error.message);
      }

      console.log('‚úÖ Application cleanup completed');
    } catch (error) {
      console.error('‚ùå Error during application cleanup:', error);
    }
  }

  // ‰ºòÂåñÁ™óÂè£ÂÖ≥Èó≠Â§ÑÁêÜ
  closeAIWindow(windowId) {
    const windowData = this.aiWindows.get(windowId);
    if (windowData && windowData.window && !windowData.window.isDestroyed()) {
      try {
        // ÁßªÈô§‰∫ã‰ª∂ÁõëÂê¨Âô®Èò≤Ê≠¢ÂÜÖÂ≠òÊ≥ÑÊºè
        windowData.window.removeAllListeners();
        windowData.window.close();
        this.aiWindows.delete(windowId);
        console.log(`‚úÖ AI window ${windowId} closed and cleaned up`);
        return true;
      } catch (error) {
        console.error(`‚ùå Failed to close AI window ${windowId}:`, error);
        // Âç≥‰ΩøÂÖ≥Èó≠Â§±Ë¥•‰πüË¶Å‰ªéMap‰∏≠ÁßªÈô§
        this.aiWindows.delete(windowId);
        return false;
      }
    }
    return false;
  }
}

// ÂàõÂª∫Â∫îÁî®ÂÆû‰æãÂπ∂ÂàùÂßãÂåñ
const aiApp = new AIBrowserApp();
aiApp.initialize().catch(console.error);

// ÂØºÂá∫Â∫îÁî®ÂÆû‰æã‰æõÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®
module.exports = aiApp;